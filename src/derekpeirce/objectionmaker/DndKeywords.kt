package derekpeirce.objectionmaker

import java.awt.Color
import kotlin.random.Random
import kotlin.time.milliseconds
import kotlin.time.seconds

class Spell(val name: String) {
    override fun toString() = color(name, Color.GREEN)
    fun capitalize() = Spell(name.capitalize())
}

class Keyword(val name: String) {
    override fun toString() = color(name, Color.CYAN)
    fun capitalize() = Keyword(name.capitalize())
}

fun keyword(s: String) = Keyword(s)
fun spell(s: String) = Spell(s)
fun value(n: Int) = color(n.toString(), Color.ORANGE)


val combatStepByStep = keyword("Combat Step by Step")
val chapterNineCombat = keyword("Chapter 9: Combat")

val action = keyword("action")
val ready = keyword("Ready")
val readied = keyword("Readied")
val uncannyDodge = keyword("Uncanny Dodge")
val dash = keyword("Dash")
val reaction = keyword("reaction")
val help = keyword("Help")
val surprise = keyword("surprise")
val surprised = keyword("surprised")
val surpriseRound = keyword("surprise round")
val passivePerception = keyword("passive Perception")
val sleightOfHand = keyword("Sleight of Hand")
val advantage = keyword("advantage")
val disadvantage = keyword("disadvantage")
val investigation = keyword("Investigation")
val reliableTalent = keyword("Reliable Talent")
val assassinate = keyword("Assassinate")
val hitPoints = keyword("hit points")
val criticalHit = keyword("critical hit")
val initiative = keyword("initiative")
val sneakAttack = keyword("Sneak Attack")
val jackOfAllTrades = keyword("Jack of All Trades")
val cuttingWords = keyword("Cutting Words")
val peerlessSkill = keyword("Peerless Skill")
val proficiencyBonus = keyword("proficiency bonus")
val abilityCheck = keyword("ability check")
val abilityChecks = keyword("ability checks")
val bardicInspiration = keyword("Bardic Inspiration")
val bardicInspirations = keyword("Bardic Inspirations")
val cunningActionAim = keyword("Cunning Action: Aim")
val perception = keyword("Perception")
val daggerOfVenom = keyword("Dagger of Venom")
val attackRoll = keyword("attack roll")
val dexterity = keyword("Dexterity")
val strength = keyword("Strength")
val alert = keyword("Alert")
val spells = keyword("spells")
val opportunityAttack = keyword("opportunity attack")
val invisible = keyword("invisible")
val invisibility = keyword("invisibility")
val thirdEye = keyword("Third Eye")
val warCaster = keyword("War Caster")
val reach = keyword("reach")
val sentinel = keyword("Sentinel")
val wildShaped = keyword("wild-shaped")
val inspiration = keyword("inspiration")
val blindsight = keyword("blindsight")
val grapple = keyword("grapple")
val attackAction = keyword("Attack action")
val meleeAttack = keyword("melee attack")
val improvisedWeapon = keyword("improvised weapon")
val improvisedWeapons = keyword("improvised weapons")
val see = keyword("see")
val restrained = keyword("restrained")
val tavernBrawler = keyword("Tavern Brawler")
val sharpshooter = keyword("Sharpshooter")
val greatWeaponMaster = keyword("Great Weapon Master")

val d4 = keyword("d4")
val d12 = keyword("d12")
val charisma = keyword("Charisma")
val deception = keyword("Deception")
val portent = keyword("Portent")
val d20 = keyword("d20")
val mageSlayer = keyword("Mage Slayer")
val cuttingWord = keyword("Cutting Word")
val armorClass = keyword("Armor Class")
val d100 = keyword("d100")
val tenD10 = keyword("10d10")
val dc = keyword("DC")
val shortRest = keyword("short rest")
val twinned = keyword("twinned")
val twin = keyword("twin")
val twinning = keyword("twinning")
val twinnedSpell = keyword("Twinned Spell")
val target = keyword("target")
val targets = keyword("targets")
val targeting = keyword("targeting")
val metamagic = keyword("Metamagic")
val transmutation = keyword("transmutation")
val paralyzed = keyword("paralyzed")
val magicInitiate = keyword("Magic Initiate")
val aura = keyword("aura")
val concentration = keyword("concentration")
val magical = keyword("magical")
val nonmagical = keyword("nonmagical")
val silvered = keyword("silvered")
val silver = keyword("silver")
val channelDivinity = keyword("Channel Divinity")
val sacredWeapon = keyword("Sacred Weapon")
val devilsSight = keyword("Devil's Sight")
val driftglobe = keyword("driftglobe")
val gogglesOfNight = keyword("goggles of night")
val eyesOfTheRuneKeeper = keyword("Eyes of the Rune Keeper")
val insightfulFighting = keyword("Insightful Fighting")
val insight = keyword("Insight")
val hides = keyword("hides")

val eversmokingBottle = keyword("Eversmoking Bottle")

val alarm = spell("alarm")
val holdPerson = spell("hold person")
val freedomOfMovement = spell("freedom of movement")
val planeShift = spell("plane shift")
val leomundsTinyHut = spell("Leomund's tiny hut")
val fireball = spell("fireball")
val scorchingRay = spell("scorching ray")
val burningHands = spell("burning hands")
val dragonsBreath = spell("dragon's breath")
val haste = spell("haste")
val polymorph = spell("polymorph")
val truePolymorph = spell("true polymorph")
val dominatePerson = spell("dominate person")
val disintegrate = spell("disintegrate")
val counterspell = spell("counterspell")
val deathWard = spell("death ward")
val dispelMagic = spell("dispel magic")
val glibness = spell("glibness")
val mageArmor = spell("mage armor")
val contingency = spell("contingency")
val disguiseSelf = spell("disguise self")
val animateObjects = spell("animate objects")
val conjureAnimals = spell("conjure animals")
val fogCloud = spell("fog cloud")
val light = spell("light")
val thunderwave = spell("thunderwave")
val darkness = spell("darkness")
val mindSpike = spell("mind spike")
val fireBolt = spell("fire bolt")
val viciousMockery = spell("vicious mockery")

val savingThrow = keyword("saving throw")
val savingThrows = keyword("saving throws")
val saves = keyword("saves")
val smallPause = pause(100.milliseconds)
val pause = pause(500.milliseconds)
val bigPause = pause(1.seconds)

val random = Random(123456)

val dieRoll = Sound.THWAP.toString() + pause
fun diceRolls(n: Int) = (1..n).map { Sound.THWAP.toString() +  pause((40..70).random(random).milliseconds)}.joinToString(separator = "") + pause(450.milliseconds)
